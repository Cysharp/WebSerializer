// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY `Serializers/PrimitiveSerializer.tt`. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace Cysharp.Web.Serializers
{
    public sealed class BooleanWebSerializer : IWebSerializer<Boolean>
    {
        public void Serialize(ref WebSerializerWriter writer, Boolean value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class ByteWebSerializer : IWebSerializer<Byte>
    {
        public void Serialize(ref WebSerializerWriter writer, Byte value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class SByteWebSerializer : IWebSerializer<SByte>
    {
        public void Serialize(ref WebSerializerWriter writer, SByte value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class CharWebSerializer : IWebSerializer<Char>
    {
        public void Serialize(ref WebSerializerWriter writer, Char value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class DecimalWebSerializer : IWebSerializer<Decimal>
    {
        public void Serialize(ref WebSerializerWriter writer, Decimal value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class DoubleWebSerializer : IWebSerializer<Double>
    {
        public void Serialize(ref WebSerializerWriter writer, Double value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class SingleWebSerializer : IWebSerializer<Single>
    {
        public void Serialize(ref WebSerializerWriter writer, Single value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class Int32WebSerializer : IWebSerializer<Int32>
    {
        public void Serialize(ref WebSerializerWriter writer, Int32 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class UInt32WebSerializer : IWebSerializer<UInt32>
    {
        public void Serialize(ref WebSerializerWriter writer, UInt32 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class Int64WebSerializer : IWebSerializer<Int64>
    {
        public void Serialize(ref WebSerializerWriter writer, Int64 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class UInt64WebSerializer : IWebSerializer<UInt64>
    {
        public void Serialize(ref WebSerializerWriter writer, UInt64 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class Int16WebSerializer : IWebSerializer<Int16>
    {
        public void Serialize(ref WebSerializerWriter writer, Int16 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

    public sealed class UInt16WebSerializer : IWebSerializer<UInt16>
    {
        public void Serialize(ref WebSerializerWriter writer, UInt16 value, WebSerializerOptions options)
        {
            var sb = writer.GetStringBuilder();
            if (options.CultureInfo == null)
            {
                sb.Append(value);
            }
            else
            {
                sb.Append(options.CultureInfo, $"{value}");
            }
        }
    }

}

namespace Cysharp.Web.Providers
{
    public sealed partial class PrimitiveWebSerializerProvider
    {
        internal partial void InitPrimitives()
        {
            serializers[typeof(System.Boolean)] = new Cysharp.Web.Serializers.BooleanWebSerializer();
            serializers[typeof(System.Byte)] = new Cysharp.Web.Serializers.ByteWebSerializer();
            serializers[typeof(System.SByte)] = new Cysharp.Web.Serializers.SByteWebSerializer();
            serializers[typeof(System.Char)] = new Cysharp.Web.Serializers.CharWebSerializer();
            serializers[typeof(System.Decimal)] = new Cysharp.Web.Serializers.DecimalWebSerializer();
            serializers[typeof(System.Double)] = new Cysharp.Web.Serializers.DoubleWebSerializer();
            serializers[typeof(System.Single)] = new Cysharp.Web.Serializers.SingleWebSerializer();
            serializers[typeof(System.Int32)] = new Cysharp.Web.Serializers.Int32WebSerializer();
            serializers[typeof(System.UInt32)] = new Cysharp.Web.Serializers.UInt32WebSerializer();
            serializers[typeof(System.Int64)] = new Cysharp.Web.Serializers.Int64WebSerializer();
            serializers[typeof(System.UInt64)] = new Cysharp.Web.Serializers.UInt64WebSerializer();
            serializers[typeof(System.Int16)] = new Cysharp.Web.Serializers.Int16WebSerializer();
            serializers[typeof(System.UInt16)] = new Cysharp.Web.Serializers.UInt16WebSerializer();
        }
    }
}